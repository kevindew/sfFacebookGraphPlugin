<?php

/**
 * PluginsfFacebookGraphUserProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sfFacebookGraphPlugin
 * @subpackage userProfile
 * @author     Kevin Dew <kev@dewsolutions.co.uk>
 */
abstract class PluginsfFacebookGraphUserProfile
extends BasesfFacebookGraphUserProfile
{
  /**
   * Whether a user has just registered via facebook
   *
   * @var   boolean
   */
  protected $_newUser = false;

  /**
   * Whether a user has just connected with facebook
   *
   * @var   boolean
   */
  protected $_newlyConnected = false;

  /**
   * Create a user for a Facebook account
   *
   * Based on and borrowed heavily from
   * sfFacebookGuardAdapter::createSfGuardUserWithFacebookUidAndCon in
   * sfFacebookConnectPlugin by Fabrice Bernhard
   *
   * @param   int     $facebookUid
   * @param   string  $accessToken
   * @param   int     $accessTokenExpiry
   * @param   array   $facebookUserInfo
   * @return  sfGuardUser
   */
  static public function createUser(
    $facebookUid, $accessToken, $accessTokenExpiry, array $facebookUserInfo
  )
  {
    $sfGuardUser = new sfGuardUser();
    $sfGuardUser->setUsername(
      self::generateFacebookUsername($facebookUid)
    );

    $connection = Doctrine::getConnectionByTableName('sfGuardUser');

    try {
      $connection->beginTransaction();
      $sfGuardUser->save();

      $sfGuardUser
        ->getProfile()
        ->setFacebookOnlyAccount(true)
        ->setUserSetName(false)
        ->setNewUser(true)
        ->setUserSetEmailAddress(false)
        ->_connectToFacebook(
          $facebookUid,
          $accessToken,
          $accessTokenExpiry,
          $facebookUserInfo,
          $sfGuardUser
        )
      ;

      $connection->commit();

    } catch (Exception $e) {
      $connection->rollback();
      throw $e;
    }

    return $sfGuardUser;
  }

  /**
   * Takes the request and tries to connect the user to an account
   *
   * @param   sfFacebookGraphUser  $user
   * @return  sfFacebookGraphUser
   */
  static public function getCurrentFacebookUser($user)
  {
    // get facebook user
    $facebookUid = sfFacebookGraph::getCurrentUser();

    if (!$facebookUid) {
      throw new Exception('Facebook user not found');
    }

    // get current user info from api
    try {
      $facebookUserInfo = sfFacebookGraph::getCurrentUserInfo();
    } catch (Exception $e) {
      throw $e;
    }

    $accessToken = sfFacebookGraph::getCurrentAccessToken();
    $accessTokenExpiry = sfFacebookGraph::getCurrentAccessExpiry();

    // user signed in and facebook connected
    if ($user->isAuthenticated() && $user->isFacebookConnected())
    {
      $user
        ->getProfile()
        ->_facebookUpdateProfile(
          $accessToken,
          $accessTokenExpiry,
          $facebookUserInfo,
          $user->getGuardUser()
        )
      ;

      return $user;
    }

    // get user object

    // email to find facebook user
    $email = isset($facebookUserInfo['email'])
      ? $facebookUserInfo['email']
      : ''
    ;

    if (sfConfig::get('app_facebook_dont_store_proxy_emails', false))
    {
      if (sfFacebookGraph::checkProxyEmail($email))
      {
        $email = null;
      }
    }

    $userObj = self::getUserByFacebookCredentials($facebookUid, $email);

    if ($user->isAuthenticated()) {

      if ($user === $userObj) {

        $newlyConnected = $user->getProfile()->getFacebookUid() === null;

        // user already signed in
        $user
          ->getProfile()
          ->_connectToFacebook(
            $facebookUid,
            $accessToken,
            $accessTokenExpiry,
            $facebookUserInfo,
            $user->getGuardUser()
          )
          ->setNewlyConnected($newlyConnected)
        ;

        return $user;

      } else if(!$userObj) {

        // user account exists but not connected to facebook
        $user
          ->getProfile()
          ->_connectToFacebook(
            $facebookUid,
            $accessToken,
            $accessTokenExpiry,
            $facebookUserInfo,
            $user->getGuardUser()
          )
          ->setNewlyConnected(true)
        ;

        return $user;

      } else {

        // user has a different facebook account

        // sign them out (we'll try sign them in again)
        $user->signOut();

      }
    }

    // user exists
    if ($userObj)
    {
      $newlyConnected = $userObj->getProfile()->getFacebookUid() === null;

      $userObj
        ->getProfile()
        ->_connectToFacebook(
          $facebookUid,
          $accessToken,
          $accessTokenExpiry,
          $facebookUserInfo,
          $userObj
        )
        ->setNewlyConnected($newlyConnected)
      ;
      $user->signIn($userObj, false, null, true);
      return $user;
    }

    try
    {
      // create new user
      $user
        ->signIn(
          self::createUser(
            $facebookUid,
            $accessToken,
            $accessTokenExpiry,
            $facebookUserInfo
          ), false, null, true
        )
      ;

    }
    catch (Exception $e)
    {
      throw $e;
    }

    return $user;
  }


  static public function getUserByFacebookCredentials($facebookUid, $email)
  {
    $userObj = self::getUserByFacebookUid($facebookUid);

    if (!$userObj && $email) {
      // check by email address

      $userObj = self::getUserByEmail($email);
    }

    return $userObj;
  }

  /**
   * Retrieve a user by their facebook uid
   *
   * @param   int  $facebookUid
   * @return  sfGuardUser|false
   */
  static public function getUserByFacebookUid($facebookUid)
  {
    return Doctrine::getTable('sfGuardUser')
                   ->createQuery('u')
                   ->innerJoin('u.Profile p')
                   ->where('p.facebook_uid = ?', $facebookUid)
                   ->fetchOne();
  }

  /**
   * Retrieve a user by their facebook username
   *
   * @param   int  $facebookUid
   * @return  sfGuardUser|false
   */
  static public function getUserByFacebookUsername($facebookUid)
  {
    return Doctrine::getTable('sfGuardUser')
      ->createQuery('u')
      ->leftJoin('u.Profile p')
      ->where('u.username = ?', self::generateFacebookUsername($facebookUid))
      ->fetchOne()
    ;
  }

  /**
   * Retrieve a user by their email address
   *
   * @param   string  $email
   * @return  sfGuardUser|false
   */
  static public function getUserByEmail($email)
  {
    if (!$email)
    {
      return false;
    }

    return Doctrine::getTable('sfGuardUser')
      ->createQuery('u')
      ->leftJoin('u.Profile p')
      ->where('u.email_address = ?', $email)
      ->fetchOne()
    ;
  }

  /**
   * Connect a user profile to a facebook account
   *
   * @param   int         $facebookUid
   * @param   string      $accessToken
   * @param   int         $accessTokenExpiry
   * @param   array       $facebookUserInfo
   * @param   sfGuardUser $user
   * @return  self
   */
  protected function _connectToFacebook(
    $facebookUid,
    $accessToken,
    $accessTokenExpiry,
    array $facebookUserInfo,
    sfGuardUser $user
  )
  {
    $this
      ->setFacebookUid($facebookUid)
      ->_facebookUpdateProfile(
        $accessToken, $accessTokenExpiry, $facebookUserInfo, $user
      )
    ;

    return $this;
  }

  /**
   * Update facebook details
   *
   * @param   string      $accessToken
   * @param   int         $accessTokenExpiry
   * @param   array       $facebookUserInfo
   * @param   sfGuardUser $user
   * @return  self
   */
  protected function _facebookUpdateProfile(
    $accessToken, $accessTokenExpiry, array $facebookUserInfo, sfGuardUser $user
  )
  {
    $this
      ->setActiveAccessToken($accessToken, $accessTokenExpiry)
      ->mergeFacebookInfo($facebookUserInfo, $user)
      ->save()
    ;

    return $this;
  }

  /**
   * Set and store the access token if the user has given us permissions to use
   * it
   *
   * @param   string  $accessToken        OAuth Access Token
   * @param   int     $accessTokenExpiry  Timestamp when access token will expire
   * @return  self
   */
  public function setActiveAccessToken($accessToken, $accessTokenExpiry)
  {
    $this->setAccessToken($accessTokenExpiry == 0 ? $accessToken : null);

    return $this;
  }

  /**
   * Merge a users data with that from Facebook, updating fields where
   * appropriate
   *
   * @param   array       $facebookUserInfo
   * @param   sfGuardUser $user
   * @return  self
   */
  public function mergeFacebookInfo(array $facebookUserInfo, sfGuardUser $user)
  {
    if (!$this->getUserSetName()) {

      if (isset($facebookUserInfo['name'])
      && $this->getFullName() != $facebookUserInfo['name']) {
        $this->setFullName($facebookUserInfo['name']);
      }

      if (isset($facebookUserInfo['first_name'])
      && $user->getFirstName() != $facebookUserInfo['first_name']) {
        $user->setFirstName($facebookUserInfo['first_name']);
      }

      if (isset($facebookUserInfo['last_name'])
      && $user->getLastName() != $facebookUserInfo['last_name']) {
        $user->setLastName($facebookUserInfo['last_name']);
      }

    }

    if (!$this->getUserSetEmailAddress()) {
      $email = isset($facebookUserInfo['email'])
        ? $facebookUserInfo['email']
        : '';

      if (sfConfig::get('app_facebook_dont_store_proxy_emails', false)) {
        if (sfFacebookGraph::checkProxyEmail($email)) {
          $email = '';
        }
      }

      if ($email != $user->getEmailAddress()) {
        $user->setEmailAddress($email);
      }
    }

    return $this;
  }

  /**
   * Generates the username used in sfGuard
   *
   * @param   int $facebookUid
   * @return  string
   */
  static public function generateFacebookUsername($facebookUid)
  {
    return 'Facebook_' . $facebookUid;
  }

  /**
   * Get Facebook logout url for user
   *
   * @param   string $redirect
   *
   * @return  string
   */
  public function getFacebookLogoutUrl($redirect = '')
  {
    $params = array();

    if ($redirect)
    {
      $params['next'] = $redirect;
    }

    return sfFacebookGraph::getFacebookPlatform()->getLogoutUrl($params);
  }

  /**
   * Get whether or not a new user has been registered
   *
   * @return  bool
   */
  public function getNewUser()
  {
    return $this->_newUser;
  }

  /**
   * Set whether or not a new user has been registered
   *
   * @param   bool  $newUser
   * @return  self
   */
  public function setNewUser($newUser)
  {
    $this->_newUser = $newUser;

    return $this;
  }

  /**
   * Get whether or not a user has just connected with facebook
   *
   * @return  bool
   */
  public function getNewlyConnected()
  {
    return $this->_newlyConnected;
  }

  /**
   * Set whether or not a user has just connected with facebook
   *
   * @param   bool  $newlyConnected
   * @return  self
   */
  public function setNewlyConnected($newlyConnected)
  {
    $this->_newlyConnected = $newlyConnected;

    return $this;
  }
}